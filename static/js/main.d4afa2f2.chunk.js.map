{"version":3,"sources":["actions/errorActions.js","actions/types.js","config.js","actions/authActions.js","components/auth/RegisterModal.js","components/auth/LoginModal.js","components/auth/Logout.js","components/AppNavbar.js","actions/itemActions.js","components/ShoppingList.js","components/ItemModal.js","reducers/itemReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["returnErrors","msg","status","id","type","payload","clearErrors","mainAPI","tokenConfig","getState","token","auth","config","headers","RegisterModal","state","modal","name","email","password","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","register","prevProps","this","error","isAuthenticated","NavLink","onClick","href","Modal","isOpen","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","className","Button","style","marginTop","block","Component","connect","dispatch","body","JSON","stringify","axios","post","then","res","data","catch","err","response","LoginModal","user","login","Logout","logout","AppNavbar","authLinks","NavItem","guestLink","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","setItemsLoding","ShoppingList","onDeleteClick","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","CSSTransition","key","timeout","classNames","ListGroupItem","size","bind","get","delete","ItemModal","newItem","addItem","marginBottom","input","initialState","loading","localStorage","getItem","isLoading","combineReducers","action","filter","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8YAGaA,EAAe,SAACC,EAAKC,GAAuB,IAAfC,EAAc,uDAAT,KAC3C,MAAO,CACHC,KCQgB,aDPhBC,QAAS,CAAEJ,MAAKC,SAAQC,QAKnBG,EAAc,WACvB,MAAO,CACHF,KCCkB,iBCdbG,EAAU,kDC0GVC,EAAc,SAAAC,GAEvB,IAAMC,EAAQD,IAAWE,KAAKD,MAGxBE,EAAS,CACXC,QAAS,CACL,eAAgB,qBASxB,OAJIH,IACAE,EAAOC,QAAQ,gBAAkBH,GAG9BE,GCxGLE,E,4MACFC,MAAQ,CACJC,OAAO,EACPC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVlB,IAAK,M,EA8BTmB,OAAS,WAEL,EAAKC,MAAMf,cACX,EAAKgB,SAAS,CACVN,OAAQ,EAAKD,MAAMC,S,EAI3BO,SAAW,SAACC,GACR,EAAKF,SAAL,eAAiBE,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,S,EAG9CC,SAAW,SAAAH,GACPA,EAAEI,iBADU,MAGsB,EAAKb,MAGjCc,EAAU,CACZZ,KAPQ,EAGJA,KAKJC,MARQ,EAGEA,MAMVC,SATQ,EAGSA,UAUrB,EAAKE,MAAMS,SAASD,I,iEA5CLE,GAAY,IAAD,EACSC,KAAKX,MAAhCY,EADkB,EAClBA,MAAOC,EADW,EACXA,gBACXD,IAAUF,EAAUE,QAEH,kBAAbA,EAAM9B,GACN6B,KAAKV,SAAS,CAAErB,IAAKgC,EAAMhC,IAAIA,MAE/B+B,KAAKV,SAAS,CAAErB,IAAK,QAKzB+B,KAAKjB,MAAMC,OACPkB,GACAF,KAAKZ,W,+BAkCb,OACI,6BACI,kBAACe,EAAA,EAAD,CAASC,QAASJ,KAAKZ,OAAQiB,KAAK,KAApC,YAGA,kBAACC,EAAA,EAAD,CAAOC,OAAQP,KAAKjB,MAAMC,MAAOI,OAAQY,KAAKZ,QAC1C,kBAACoB,EAAA,EAAD,CAAapB,OAAQY,KAAKZ,QAA1B,YACA,kBAACqB,EAAA,EAAD,KACKT,KAAKjB,MAAMd,IACR,kBAACyC,EAAA,EAAD,CAAOC,MAAM,UAAb,IAAwBX,KAAKjB,MAAMd,IAAnC,KACA,KACJ,kBAAC2C,EAAA,EAAD,CAAMjB,SAAUK,KAAKL,UACjB,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,QACA,kBAACC,EAAA,EAAD,CACI5C,KAAK,OACLa,KAAK,OACLd,GAAG,OACH8C,YAAY,OACZC,UAAU,OACV3B,SAAUS,KAAKT,WAGnB,kBAACuB,EAAA,EAAD,CAAOC,IAAI,SAAX,SACA,kBAACC,EAAA,EAAD,CACI5C,KAAK,QACLa,KAAK,QACLd,GAAG,QACH8C,YAAY,QACZC,UAAU,OACV3B,SAAUS,KAAKT,WAGnB,kBAACuB,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,kBAACC,EAAA,EAAD,CACI5C,KAAK,WACLa,KAAK,WACLd,GAAG,WACH8C,YAAY,WACZC,UAAU,OACV3B,SAAUS,KAAKT,WAEnB,kBAAC4B,EAAA,EAAD,CACIR,MAAM,OACNS,MAAO,CAAEC,UAAW,QACpBC,OAAK,GAHT,qB,GA3GJC,aA8HbC,eALS,SAACzC,GAAD,MAAY,CAChCmB,gBAAiBnB,EAAMJ,KAAKuB,gBAC5BD,MAAOlB,EAAMkB,SAGuB,CAAEH,SD3GlB,SAAC,GAAD,IAAGb,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAhB,OAA+B,SAAAsC,GAErD,IAOMC,EAAOC,KAAKC,UAAU,CAAE3C,OAAMC,QAAOC,aAE3C0C,IACGC,KAAKvD,EAAU,aAAcmD,EAVjB,CACb7C,QAAS,CACP,eAAgB,sBASjBkD,MAAK,SAAAC,GAAG,OACPP,EAAS,CACPrD,KFzCsB,mBE0CtBC,QAAS2D,EAAIC,UAGhBC,OAAM,SAAAC,GACLV,EACEzD,EAAamE,EAAIC,SAASH,KAAME,EAAIC,SAASlE,OAAQ,kBAEvDuD,EAAS,CACPrD,KFjDmB,uBGoIyBE,eAArCkD,CAAoD1C,GC9H7DuD,E,4MACJtD,MAAQ,CACNC,OAAO,EACPE,MAAO,GACPC,SAAU,GACVlB,IAAK,M,EA6BPmB,OAAS,WAEP,EAAKC,MAAMf,cACX,EAAKgB,SAAS,CACZN,OAAQ,EAAKD,MAAMC,S,EAIvBO,SAAW,SAAAC,GACT,EAAKF,SAAL,eAAiBE,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,S,EAG5CC,SAAW,SAAAH,GACTA,EAAEI,iBADY,MAGc,EAAKb,MAE3BuD,EAAO,CACXpD,MANY,EAGNA,MAINC,SAPY,EAGCA,UAQf,EAAKE,MAAMkD,MAAMD,I,iEA1CAvC,GAAY,IAAD,EACOC,KAAKX,MAAhCY,EADoB,EACpBA,MAAOC,EADa,EACbA,gBACXD,IAAUF,EAAUE,QAEL,eAAbA,EAAM9B,GACR6B,KAAKV,SAAS,CAAErB,IAAKgC,EAAMhC,IAAIA,MAE/B+B,KAAKV,SAAS,CAAErB,IAAK,QAKrB+B,KAAKjB,MAAMC,OACTkB,GACFF,KAAKZ,W,+BAgCT,OACE,6BACE,kBAACe,EAAA,EAAD,CAASC,QAASJ,KAAKZ,OAAQiB,KAAK,KAApC,SAIA,kBAACC,EAAA,EAAD,CAAOC,OAAQP,KAAKjB,MAAMC,MAAOI,OAAQY,KAAKZ,QAC5C,kBAACoB,EAAA,EAAD,CAAapB,OAAQY,KAAKZ,QAA1B,SACA,kBAACqB,EAAA,EAAD,KACGT,KAAKjB,MAAMd,IACV,kBAACyC,EAAA,EAAD,CAAOC,MAAM,UAAUX,KAAKjB,MAAMd,KAChC,KACJ,kBAAC2C,EAAA,EAAD,CAAMjB,SAAUK,KAAKL,UACnB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,SACA,kBAACC,EAAA,EAAD,CACE5C,KAAK,QACLa,KAAK,QACLd,GAAG,QACH8C,YAAY,QACZC,UAAU,OACV3B,SAAUS,KAAKT,WAGjB,kBAACuB,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,kBAACC,EAAA,EAAD,CACE5C,KAAK,WACLa,KAAK,WACLd,GAAG,WACH8C,YAAY,WACZC,UAAU,OACV3B,SAAUS,KAAKT,WAEjB,kBAAC4B,EAAA,EAAD,CAAQR,MAAM,OAAOS,MAAO,CAAEC,UAAW,QAAUC,OAAK,GAAxD,kB,GA9FSC,aA+GVC,eALS,SAAAzC,GAAK,MAAK,CAChCmB,gBAAiBnB,EAAMJ,KAAKuB,gBAC5BD,MAAOlB,EAAMkB,SAKb,CAAEsC,MFhEiB,SAAC,GAAD,IAAGrD,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OAAyB,SAAAsC,GAE5C,IAOMC,EAAOC,KAAKC,UAAU,CAAE1C,QAAOC,aAErC0C,IACGC,KAAKvD,EAAU,YAAamD,EAVhB,CACb7C,QAAS,CACP,eAAgB,sBASjBkD,MAAK,SAAAC,GAAG,OACPP,EAAS,CACPrD,KF1EmB,gBE2EnBC,QAAS2D,EAAIC,UAGhBC,OAAM,SAAAC,GACLV,EACEzD,EAAamE,EAAIC,SAASH,KAAME,EAAIC,SAASlE,OAAQ,eAEvDuD,EAAS,CACPrD,KFlFgB,oBI0HbE,eAFIkD,CAGba,GC9HWG,EAAb,uKAOQ,OACI,kBAAC,WAAD,KACI,kBAACrC,EAAA,EAAD,CAASC,QAASJ,KAAKX,MAAMoD,OAAQpC,KAAK,KAA1C,eAThB,GAA4BkB,aAiBbC,cAAQ,KAAM,CAAEiB,OH2ET,WAClB,MAAO,CACHrE,KF1FoB,oBKaboD,CACdgB,GCPKE,E,4MACF3D,MAAQ,CACJwB,QAAQ,G,EAOZnB,OAAS,WACL,EAAKE,SAAS,CACViB,QAAS,EAAKxB,MAAMwB,U,uDAKlB,IAAD,EAC6BP,KAAKX,MAAMV,KAArCuB,EADH,EACGA,gBAAiBoC,EADpB,EACoBA,KAEnBK,EACF,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,KACI,0BAAM1B,UAAU,oBACZ,gCAASoB,EAAI,iBAAaA,EAAKrD,MAAS,MAGhD,kBAAC2D,EAAA,EAAD,KAAS,kBAAC,EAAD,QAIXC,EACF,kBAAC,WAAD,KACI,kBAACD,EAAA,EAAD,KAAS,kBAAC,EAAD,OACT,kBAACA,EAAA,EAAD,KAAS,kBAAC,EAAD,QAIjB,OACI,6BACA,kBAACE,EAAA,EAAD,CAAQnC,MAAM,OAAOoC,MAAI,EAACC,OAAO,KAAK9B,UAAU,QAC5C,kBAAC+B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAa7C,KAAK,KAAlB,gBACA,kBAAC8C,EAAA,EAAD,CAAe/C,QAASJ,KAAKZ,SAC7B,kBAACgE,EAAA,EAAD,CAAU7C,OAAQP,KAAKjB,MAAMwB,OAAQ8C,QAAM,GACvC,kBAACC,EAAA,EAAD,CAAKpC,UAAU,UAAUmC,QAAM,GACzBnD,EAAkByC,EAAYE,W,GA7CpCtB,aA2DTC,eAJS,SAAAzC,GAAK,MAAK,CAC9BJ,KAAMI,EAAMJ,QAGwB,KAAzB6C,CAA+BkB,G,kCC5BjCa,EAAiB,WAC1B,MAAO,CACHnF,KP/CqB,kBQIvBoF,E,4MAWFC,cAAgB,SAAAtF,GACZ,EAAKkB,MAAMqE,WAAWvF,I,kEAJtB6B,KAAKX,MAAMsE,a,+BAOL,IAAD,OAEGC,EAAU5D,KAAKX,MAAMwE,KAArBD,MACR,OACI,kBAACX,EAAA,EAAD,KACI,kBAACa,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiB7C,UAAU,iBACtB0C,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,IAAKhF,EAAR,EAAQA,KAAR,OACP,kBAACiF,EAAA,EAAD,CAAeC,IAAKF,EAAKG,QAAS,IAAKC,WAAW,QAC9C,kBAACC,EAAA,EAAD,KACK,EAAKjF,MAAMa,gBACZ,kBAACiB,EAAA,EAAD,CACAD,UAAU,aACVP,MAAM,SACN4D,KAAK,KACLnE,QAAS,EAAKqD,cAAce,KAAK,EAAMP,IAJvC,QAQK,KACJhF,c,GAnCVsC,aAmDZC,eALS,SAACzC,GAAD,MAAY,CAChC8E,KAAM9E,EAAM8E,KACZ3D,gBAAiBnB,EAAMJ,KAAKuB,mBAGQ,CAAEyD,SDnDlB,kBAAM,SAAAlC,GAC1BA,EAAS8B,KACT1B,IACK4C,IAAIlG,EAAU,cACdwD,MAAK,SAAAC,GAAG,OACLP,EAAS,CACLrD,KPbS,YOcTC,QAAS2D,EAAIC,UAEhBC,OAAM,SAAAC,GAAG,OACNV,EAASzD,EAAamE,EAAIC,SAASH,KAAME,EAAIC,SAASlE,cCyClBwF,WDvB1B,SAAAvF,GAAE,OAAI,SAACsD,EAAUhD,GACvCoD,IACK6C,OAAOnG,EAAO,qBAAiBJ,GAAMK,EAAYC,IACjDsD,MAAK,SAAAC,GAAG,OACLP,EAAS,CACLrD,KPtCY,cOuCZC,QAASF,OAEZ+D,OAAM,SAAAC,GAAG,OACNV,EAASzD,EAAamE,EAAIC,SAASH,KAAME,EAAIC,SAASlE,eCcvDsD,CAAmDgC,GC3C5DmB,E,4MACF5F,MAAQ,CACJC,OAAO,EACPC,KAAM,I,EAQVG,OAAS,WACL,EAAKE,SAAS,CACVN,OAAQ,EAAKD,MAAMC,S,EAI3BO,SAAW,SAACC,GACR,EAAKF,SAAL,eAAiBE,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,S,EAG9CC,SAAW,SAAAH,GACPA,EAAEI,iBAEF,IAAMgF,EAAU,CACZ3F,KAAM,EAAKF,MAAME,MAIrB,EAAKI,MAAMwF,QAAQD,GAGnB,EAAKxF,U,uDAIL,OACI,6BACKY,KAAKX,MAAMa,gBACR,kBAACiB,EAAA,EAAD,CACIR,MAAM,OACNS,MAAO,CAAE0D,aAAc,QACvB1E,QAASJ,KAAKZ,QAHlB,YAOI,wBAAI8B,UAAU,aAAd,kCAER,kBAACZ,EAAA,EAAD,CACIC,OAAQP,KAAKjB,MAAMC,MACnBI,OAAQY,KAAKZ,QAEb,kBAACoB,EAAA,EAAD,CAAapB,OAAQY,KAAKZ,QAA1B,wBACA,kBAACqB,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,CAAMjB,SAAUK,KAAKL,UACjB,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,QACA,kBAACC,EAAA,EAAD,CACI+D,MAAM,OACN9F,KAAK,OACLd,GAAG,OACH8C,YAAY,oBACZ1B,SAAUS,KAAKT,WAEnB,kBAAC4B,EAAA,EAAD,CACIR,MAAM,OACNS,MAAO,CAAEC,UAAW,QACpBC,OAAK,GAHT,qB,GAhERC,aAmFTC,eALS,SAACzC,GAAD,MAAY,CAChC8E,KAAM9E,EAAM8E,KACZ3D,gBAAiBnB,EAAMJ,KAAKuB,mBAGQ,CAAE2E,QF5EnB,SAAAhB,GAAI,OAAI,SAACpC,EAAUhD,GACtCoD,IACKC,KAAKvD,EAAU,aAAcsF,EAAMrF,EAAYC,IAC/CsD,MAAK,SAAAC,GAAG,OACLP,EAAS,CACLrD,KP1BS,YO2BTC,QAAS2D,EAAIC,UAEhBC,OAAM,SAAAC,GAAG,OACNV,EAASzD,EAAamE,EAAIC,SAASH,KAAME,EAAIC,SAASlE,eEmEvDsD,CAAsCmD,G,mCChG/CK,GAAe,CACjBpB,MAAO,GACPqB,SAAS,GCFPD,GAAe,CACjB/G,IAAK,GACLC,OAAQ,KACRC,GAAI,MCMF6G,GAAe,CACjBtG,MAAOwG,aAAaC,QAAQ,SAC5BjF,gBAAiB,KACjBkF,WAAW,EACX9C,KAAM,MCVK+C,eAAgB,CAC3BxB,KHCW,WAAuC,IAA9B9E,EAA6B,uDAArBiG,GAAcM,EAAO,uCACjD,OAAOA,EAAOlH,MACV,IVTiB,YUUb,OAAO,gBACAW,EADP,CAEI6E,MAAO0B,EAAOjH,QACd4G,SAAS,IAEjB,IVboB,cUchB,OAAO,gBACAlG,EADP,CAEI6E,MAAO7E,EAAM6E,MAAM2B,QAAO,SAAA1B,GAAI,OAAIA,EAAKI,MAAQqB,EAAOjH,aAE9D,IVnBiB,YUoBb,OAAO,gBACAU,EADP,CAEI6E,MAAM,CAAE0B,EAAOjH,SAAV,oBAAsBU,EAAM6E,UAEzC,IVtBqB,gBUuBjB,OAAO,gBACA7E,EADP,CAEIkG,SAAS,IAEjB,QACI,OAAOlG,IGxBfkB,MFCW,WAAwC,IAA/BlB,EAA8B,uDAAtBiG,GAAcM,EAAQ,uCAClD,OAAOA,EAAOlH,MACV,IXGgB,aWFZ,MAAO,CACHH,IAAKqH,EAAOjH,QAAQJ,IACpBC,OAAQoH,EAAOjH,QAAQH,OACvBC,GAAImH,EAAOjH,QAAQF,IAE3B,IXFkB,eWGd,MAAO,CACHF,IAAK,GACLC,OAAQ,KACRC,GAAI,MAEZ,QACI,OAAOY,IEffJ,KDUW,WAAwC,IAA/BI,EAA8B,uDAAtBiG,GAAcM,EAAQ,uCAClD,OAAOA,EAAOlH,MACV,IZdkB,eYed,OAAO,gBACAW,EADP,CAEIqG,WAAW,IAEnB,IZpBiB,cYqBb,OAAO,gBACArG,EADP,CAEImB,iBAAiB,EACjBkF,WAAW,EACX9C,KAAMgD,EAAOjH,UAErB,IZxBmB,gBYyBnB,IZtBsB,mBYwBlB,OADA6G,aAAaM,QAAQ,QAASF,EAAOjH,QAAQK,OACtC,gBACAK,EADP,GAEOuG,EAAOjH,QAFd,CAGI6B,iBAAiB,EACjBkF,WAAW,IAEnB,IZlCgB,aYmChB,IZjCgB,aYkChB,IZjCoB,iBYkCpB,IZhCmB,gBYkCf,OADAF,aAAaO,WAAW,SACjB,gBACA1G,EADP,CAEIL,MAAO,KACP4D,KAAM,KACNpC,iBAAiB,EACjBkF,WAAW,IAEnB,QACI,OAAOrG,MEhDb2G,GAAa,CAACC,MAMLC,GAJDC,YAAYC,GAJL,GAIgCC,YACjDC,IAAe,WAAf,EAAmBN,IAAYO,OAAOC,8BAAgCD,OAAOC,iCCwBlEC,I,8LAlBXP,GAAMnE,UbCoB,SAACA,EAAUhD,GAEvCgD,EAAS,CAAErD,KFZa,iBEcxByD,IACG4C,IAAIlG,EAAU,iBAAkBC,EAAYC,IAC5CsD,MAAK,SAAAC,GAAG,OACPP,EAAS,CACPrD,KFnBiB,cEoBjBC,QAAS2D,EAAIC,UAGhBC,OAAM,SAAAC,GACLV,EAASzD,EAAamE,EAAIC,SAASH,KAAME,EAAIC,SAASlE,SACtDuD,EAAS,CACPrD,KFxBgB,uB,+BeYpB,OACE,kBAAC,IAAD,CAAUwH,MAAQA,IACf,yBAAK1E,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC+B,EAAA,EAAD,KACA,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAZO1B,cCDE6E,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhF,MAAK,SAAAiF,GACJA,EAAaC,gBAEd/E,OAAM,SAAAjC,GACLiH,QAAQjH,MAAMA,EAAMkH,c","file":"static/js/main.d4afa2f2.chunk.js","sourcesContent":["import { GET_ERRORS, CLEAR_ERRORS } from \"./types\";\r\n\r\n//RETURN ERRORS\r\nexport const returnErrors = (msg, status, id = null) => {\r\n    return {\r\n        type: GET_ERRORS,\r\n        payload: { msg, status, id}\r\n    };\r\n};\r\n\r\n// CLEAR ERRORS\r\nexport const clearErrors = () => {\r\n    return {\r\n        type: CLEAR_ERRORS\r\n    };\r\n};\r\n","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEMS = 'ADD_ITEMS';\r\nexport const DELETE_ITEMS = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\r\n\r\nexport const USER_LOADED=\"USER_LOADED\";\r\nexport const USER_LOADING=\"USER_LOADING\";\r\nexport const AUTH_ERROR=\"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS=\"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL=\"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS=\"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS=\"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL=\"REGISTER_FAIL\";\r\nexport const GET_ERRORS=\"GET_ERRORS\";\r\nexport const CLEAR_ERRORS=\"CLEAR_ERRORS\";\r\n","export const mainAPI = \"https://mern-shopping-list-server.herokuapp.com\";","import axios from 'axios';\r\nimport { returnErrors } from './errorActions';\r\nimport { mainAPI } from '../config';\r\n\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from './types';\r\n\r\n// Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  // User loading\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get(mainAPI + '/api/auth/user', tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  axios\r\n    .post(mainAPI + '/api/users', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n// Login User\r\nexport const login = ({ email, password }) => dispatch => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  axios\r\n    .post(mainAPI + '/api/auth', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL')\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n\r\n// Logout User\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    };\r\n};\r\n\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    // Get token from localstorage\r\n    const token = getState().auth.token;\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    // If token, add to hearder\r\n    if (token) {\r\n        config.headers['x-auth-token'] = token;\r\n    };\r\n\r\n    return config;\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { register } from '../../actions/authActions';\r\nimport { clearErrors } from '../../actions/errorActions';\r\n\r\nclass RegisterModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        msg: null\r\n\r\n    };\r\n\r\n    static propTypes = {\r\n        isAuthenticated: PropTypes.bool,\r\n        error: PropTypes.object.isRequired,\r\n        register: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { error, isAuthenticated } = this.props;\r\n        if (error !== prevProps.error) {\r\n            // Check for register error\r\n            if (error.id === 'REGISTER_FAIL') {\r\n                this.setState({ msg: error.msg.msg });\r\n            } else {\r\n                this.setState({ msg: null });\r\n            }\r\n        }\r\n\r\n        // If authentificated, close modal\r\n        if (this.state.modal) {\r\n            if (isAuthenticated) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        //Clear errors\r\n        this.props.clearErrors();\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, password } = this.state;\r\n\r\n        //Create user object\r\n        const newUser = {\r\n            name,\r\n            email,\r\n            password\r\n        };\r\n\r\n        //Attempt to register\r\n        this.props.register(newUser);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavLink onClick={this.toggle} href=\"#\">\r\n                    Register\r\n                </NavLink>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Register</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.state.msg ? (\r\n                            <Alert color=\"danger\"> {this.state.msg} </Alert>\r\n                        ) : null}\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for='name'>Name</Label>\r\n                                <Input\r\n                                    type='text'\r\n                                    name='name'\r\n                                    id='name'\r\n                                    placeholder='Name'\r\n                                    className='mb-3'\r\n                                    onChange={this.onChange}\r\n                                />\r\n\r\n                                <Label for='email'>Email</Label>\r\n                                <Input\r\n                                    type='email'\r\n                                    name='email'\r\n                                    id='email'\r\n                                    placeholder='Email'\r\n                                    className='mb-3'\r\n                                    onChange={this.onChange}\r\n                                />\r\n\r\n                                <Label for='password'>Password</Label>\r\n                                <Input\r\n                                    type='password'\r\n                                    name='password'\r\n                                    id='password'\r\n                                    placeholder='Password'\r\n                                    className='mb-3'\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <Button\r\n                                    color='dark'\r\n                                    style={{ marginTop: '2rem' }}\r\n                                    block >Register\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    error: state.error\r\n});\r\n\r\nexport default connect(mapStateToProps, { register, clearErrors })(RegisterModal);","import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { login } from '../../actions/authActions';\r\nimport { clearErrors } from '../../actions/errorActions';\r\n\r\nclass LoginModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    email: '',\r\n    password: '',\r\n    msg: null\r\n  };\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    error: PropTypes.object.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    clearErrors: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { error, isAuthenticated } = this.props;\r\n    if (error !== prevProps.error) {\r\n      // Check for register error\r\n      if (error.id === 'LOGIN_FAIL') {\r\n        this.setState({ msg: error.msg.msg });\r\n      } else {\r\n        this.setState({ msg: null });\r\n      }\r\n    }\r\n\r\n    // If authenticated, close modal\r\n    if (this.state.modal) {\r\n      if (isAuthenticated) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    // Clear errors\r\n    this.props.clearErrors();\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { email, password } = this.state;\r\n\r\n    const user = {\r\n      email,\r\n      password\r\n    };\r\n\r\n    // Attempt to login\r\n    this.props.login(user);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavLink onClick={this.toggle} href='#'>\r\n          Login\r\n        </NavLink>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Login</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.msg ? (\r\n              <Alert color='danger'>{this.state.msg}</Alert>\r\n            ) : null}\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for='email'>Email</Label>\r\n                <Input\r\n                  type='email'\r\n                  name='email'\r\n                  id='email'\r\n                  placeholder='Email'\r\n                  className='mb-3'\r\n                  onChange={this.onChange}\r\n                />\r\n\r\n                <Label for='password'>Password</Label>\r\n                <Input\r\n                  type='password'\r\n                  name='password'\r\n                  id='password'\r\n                  placeholder='Password'\r\n                  className='mb-3'\r\n                  onChange={this.onChange}\r\n                />\r\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                  Login\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  error: state.error\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { login, clearErrors }\r\n)(LoginModal);","import React, { Component, Fragment } from 'react';\r\nimport { NavLink } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../actions/authActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Logout extends Component {\r\n\r\n    static propTypes = {\r\n        logout: PropTypes.func.isRequired\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <NavLink onClick={this.props.logout} href=\"#\">\r\n                    Logout\r\n                </NavLink>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { logout })\r\n(Logout);\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport RegisterModal from './auth/RegisterModal';\r\nimport LoginModal from './auth/LoginModal';\r\nimport Logout from './auth/Logout';\r\n\r\nclass AppNavbar extends Component{\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    static propTypes = {\r\n        auth: PropTypes.object.isRequired\r\n    }\r\n    \r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isAuthenticated, user } = this.props.auth;\r\n\r\n        const authLinks = (\r\n            <Fragment>\r\n                <NavItem>\r\n                    <span className=\"navbar-text mr-3\">\r\n                        <strong>{user ? `Welcom ${user.name}` : ''}</strong>\r\n                    </span>\r\n                </NavItem>\r\n                <NavItem><Logout/></NavItem>\r\n            </Fragment>\r\n        );\r\n\r\n        const guestLink = (\r\n            <Fragment>\r\n                <NavItem><RegisterModal/></NavItem>\r\n                <NavItem><LoginModal/></NavItem>\r\n            </Fragment>\r\n        );\r\n\r\n        return(\r\n            <div>\r\n            <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                <Container>\r\n                    <NavbarBrand href=\"/\">ShoppingList</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            { isAuthenticated ? authLinks : guestLink }\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(AppNavbar);","import axios from 'axios';\r\nimport { GET_ITEMS, ADD_ITEMS, DELETE_ITEMS, ITEMS_LOADING } from './types';\r\nimport { tokenConfig } from './authActions';\r\nimport { returnErrors } from './errorActions';\r\nimport { mainAPI } from '../config';\r\n\r\n\r\nexport const getItems = () => dispatch => {\r\n    dispatch(setItemsLoding());\r\n    axios\r\n        .get(mainAPI + '/api/items')\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_ITEMS,\r\n                payload: res.data\r\n            }))\r\n            .catch(err => \r\n                dispatch(returnErrors(err.response.data, err.response.status)));\r\n\r\n};\r\n\r\n\r\nexport const addItem = item => (dispatch, getState) => {\r\n    axios\r\n        .post(mainAPI + '/api/items', item, tokenConfig(getState))\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_ITEMS,\r\n                payload: res.data\r\n            }))\r\n            .catch(err => \r\n                dispatch(returnErrors(err.response.data, err.response.status)));\r\n\r\n};\r\n\r\nexport const deleteItem = id => (dispatch, getState) => {\r\n    axios\r\n        .delete(mainAPI + `/api/items/${id}`, tokenConfig(getState))\r\n        .then(res =>\r\n            dispatch({\r\n                type: DELETE_ITEMS,\r\n                payload: id\r\n            }))\r\n            .catch(err => \r\n                dispatch(returnErrors(err.response.data, err.response.status)));\r\n\r\n};\r\n\r\nexport const setItemsLoding = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport { Container, ListGroup, ListGroupItem, Button} from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ShoppingList extends Component {\r\n    static propTypes = {\r\n        getItems: PropTypes.func.isRequired,\r\n        item: PropTypes.object.isRequired,\r\n        isAuthenticated: PropTypes.bool\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    onDeleteClick = id => {\r\n        this.props.deleteItem(id);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { items } = this.props.item;\r\n        return(\r\n            <Container>\r\n                <ListGroup>\r\n                    <TransitionGroup className=\"shopping-list\">\r\n                        {items.map(({ _id, name}) => (\r\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                <ListGroupItem>\r\n                                    {this.props.isAuthenticated ? (\r\n                                    <Button\r\n                                    className=\"remove-btn\"\r\n                                    color=\"danger\"\r\n                                    size=\"sm\"\r\n                                    onClick={this.onDeleteClick.bind(this, _id)}\r\n                                    >\r\n                                        &times;\r\n                                    </Button>\r\n                                     ) : null }\r\n                                    {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item,\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ItemModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n\r\n    };\r\n\r\n    static propTypes = {\r\n        isAuthenticated: PropTypes.bool\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newItem = {\r\n            name: this.state.name\r\n        }\r\n\r\n        //Add item via addItem action\r\n        this.props.addItem(newItem);\r\n\r\n        //Close modal\r\n        this.toggle();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.isAuthenticated ? (\r\n                    <Button\r\n                        color=\"dark\"\r\n                        style={{ marginBottom: '2rem' }}\r\n                        onClick={this.toggle}\r\n                    >Add Item\r\n                </Button>\r\n                ) : (\r\n                        <h4 className=\"mb-3 ml-4\"> Please log in to manage items</h4>\r\n                    )}\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}>Add To Shopping Lost</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">Item</Label>\r\n                                <Input\r\n                                    input=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add shopping item\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <Button\r\n                                    color=\"dark\"\r\n                                    style={{ marginTop: '2rem' }}\r\n                                    block >Add Item\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item,\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);","import { GET_ITEMS, ADD_ITEMS, DELETE_ITEMS, ITEMS_LOADING} from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            };\r\n        case DELETE_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            };\r\n        case ADD_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_ERRORS, CLEAR_ERRORS, GET_ITEMS } from '../actions/types';\r\n\r\nconst initialState = {\r\n    msg: {},\r\n    status: null,\r\n    id: null\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_ERRORS:\r\n            return {\r\n                msg: action.payload.msg,\r\n                status: action.payload.status,\r\n                id: action.payload.id\r\n            };\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                msg: {},\r\n                status: null,\r\n                id: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case USER_LOADED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                isLoading: false,\r\n                user: action.payload\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated: true,\r\n                isLoading: false\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                isAuthenticated: false,\r\n                isLoading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\nimport errorReducer from './errorReducer';\r\nimport authReducer from './authReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer,\r\n    error: errorReducer,\r\n    auth: authReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React, {Component} from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/ItemModal';\nimport { Container  } from 'reactstrap'\n\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { loadUser } from './actions/authActions';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(loadUser());\n  }\n\n  render() {\n    return (\n      <Provider store ={store}>\n         <div className=\"App\">\n           <AppNavbar/>\n           <Container>\n           <ItemModal/>\n           <ShoppingList/>\n           </Container>\n         </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}